# GitLab CI/CD Pipeline –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ push, merge request, –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

stages:
  - prepare
  - build
  - test-quick
  - test-full
  - report
  - cleanup

variables:
  # Docker
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # Python
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  # Test settings
  ALLURE_RESULTS_DIR: "tests/allure-results"
  ALLURE_REPORT_DIR: "tests/allure-report"

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
cache:
  paths:
    - .cache/pip
    - venv/

# ==========================================
# STAGE 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==========================================
prepare:
  stage: prepare
  image: python:3.11-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl
  script:
    - echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour

# ==========================================
# STAGE 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
# ==========================================
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
  script:
    - echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    - docker-compose build --parallel
    - echo "‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
  artifacts:
    reports:
      junit: build-report.xml
  only:
    - main
    - merge_requests
    - develop

# ==========================================
# STAGE 3: –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (5 –º–∏–Ω—É—Ç)
# ==========================================
test-quick:
  stage: test-quick
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - prepare
  before_script:
    - apk add --no-cache python3 py3-pip
    - source venv/bin/activate
  script:
    - echo "‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏..."
    - docker-compose up -d
    - echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    - sleep 30  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
    - source venv/bin/activate
    - pytest tests/test_quick_demo.py -v -s --alluredir=$ALLURE_RESULTS_DIR --junitxml=quick-test-results.xml
    - echo "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
  after_script:
    - docker-compose down -v
  artifacts:
    when: always
    paths:
      - $ALLURE_RESULTS_DIR/
      - quick-test-results.xml
    reports:
      junit: quick-test-results.xml
    expire_in: 1 week
  only:
    - main
    - merge_requests

# ==========================================
# STAGE 4: –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã (15 –º–∏–Ω—É—Ç) - —Ç–æ–ª—å–∫–æ –Ω–∞ main
# ==========================================
test-full:
  stage: test-full
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - prepare
  before_script:
    - apk add --no-cache python3 py3-pip
    - source venv/bin/activate
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–´–• —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ (15 –º–∏–Ω—É—Ç)..."
    - docker-compose up -d
    - sleep 30
    - source venv/bin/activate
    - pytest tests/test_memory_leak.py -v -s --alluredir=$ALLURE_RESULTS_DIR --junitxml=full-test-results.xml
    - echo "‚úÖ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
  after_script:
    - docker-compose down -v
  artifacts:
    when: always
    paths:
      - $ALLURE_RESULTS_DIR/
      - full-test-results.xml
    reports:
      junit: full-test-results.xml
    expire_in: 1 week
  timeout: 25m  # 25 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
  only:
    - main  # –¢–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ
    - schedules  # –ò –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  when: manual  # –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞)

# ==========================================
# STAGE 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞
# ==========================================
report:
  stage: report
  image: openjdk:11-jre-slim
  dependencies:
    - test-quick
    - test-full
  before_script:
    - apt-get update -qq && apt-get install -y -qq wget
    - wget -q https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
    - tar -zxf allure-2.24.1.tgz
    - chmod +x allure-2.24.1/bin/allure
  script:
    - echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞..."
    - ./allure-2.24.1/bin/allure generate $ALLURE_RESULTS_DIR -o $ALLURE_REPORT_DIR --clean
    - echo "‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    - ls -la $ALLURE_REPORT_DIR/
  artifacts:
    paths:
      - $ALLURE_REPORT_DIR/
    expire_in: 1 month
    reports:
      junit: "*.xml"
  # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ GitLab Pages
  pages:
    stage: report
    dependencies:
      - report
    script:
      - mkdir public
      - cp -r $ALLURE_REPORT_DIR/* public/
    artifacts:
      paths:
        - public
    only:
      - main

# ==========================================
# STAGE 6: –û—á–∏—Å—Ç–∫–∞
# ==========================================
cleanup:
  stage: cleanup
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    - docker system prune -f
    - docker volume prune -f
    - echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  when: always
  allow_failure: true

# ==========================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï JOBS
# ==========================================

# Scheduled job - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å
nightly-tests:
  extends: test-full
  only:
    - schedules
  when: always
  script:
    - echo "üåô –ù–æ—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    - docker-compose up -d
    - sleep 60  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –Ω–æ—á—å—é
    - source venv/bin/activate
    - pytest tests/test_memory_leak.py -v -s --alluredir=$ALLURE_RESULTS_DIR --junitxml=nightly-results.xml
    - echo "‚úÖ –ù–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"

# Performance benchmark
performance-test:
  stage: test-full
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    - docker-compose up -d
    - sleep 30
    - |
      # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Apache Bench
      apk add --no-cache apache2-utils
      echo "üî• –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –° —É—Ç–µ—á–∫–æ–π..."
      ab -n 1000 -c 10 http://localhost:5000/api/cache > load-test-leak.txt
      echo "üî• –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —É—Ç–µ—á–∫–∏..."
      ab -n 1000 -c 10 http://localhost:5001/api/cache > load-test-no-leak.txt
  artifacts:
    paths:
      - load-test-*.txt
    expire_in: 1 week
  only:
    - main
  when: manual

# Security scan
security-scan:
  stage: test-quick
  image: python:3.11-slim
  script:
    - echo "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    - pip install safety bandit
    - safety check -r requirements.txt
    - bandit -r apps/ tests/ -f json -o security-report.json
  artifacts:
    paths:
      - security-report.json
    expire_in: 1 week
  allow_failure: true  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º pipeline –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏