#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–µ–º–æ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ GitHub Actions
"""
import subprocess
import sys
import time
import requests

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîç {description}")
    print(f"üíª –ö–æ–º–∞–Ω–¥–∞: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=300)
        
        if result.stdout:
            print(f"üì§ –í—ã–≤–æ–¥:\n{result.stdout}")
        if result.stderr:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏:\n{result.stderr}")
            
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–•")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - –¢–ê–ô–ú–ê–£–¢")
        return False
    except Exception as e:
        print(f"üí• {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def check_service_health(url, name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è {name}: {url}")
    
    for attempt in range(10):
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name} –∑–¥–æ—Ä–æ–≤!")
                return True
        except requests.exceptions.RequestException as e:
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10: {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ({e})")
            time.sleep(3)
    
    print(f"‚ùå {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –î–ï–ú–û –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if not run_command("docker --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"):
        sys.exit(1)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if not run_command("docker compose version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose"):
        if not run_command("docker-compose --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose"):
            print("‚ùå –ù–∏ docker compose, –Ω–∏ docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            sys.exit(1)
    
    # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    run_command("docker compose down", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    # 4. –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    if not run_command("docker compose build app-with-leak app-without-leak", "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"):
        sys.exit(1)
    
    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if not run_command("docker compose up -d app-with-leak app-without-leak", "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"):
        sys.exit(1)
    
    # 6. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    print("\n‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    time.sleep(15)
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    run_command("docker ps", "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    app_with_leak_ok = check_service_health("http://localhost:5000/health", "App WITH leak")
    app_without_leak_ok = check_service_health("http://localhost:5001/health", "App WITHOUT leak")
    
    if not (app_with_leak_ok and app_without_leak_ok):
        print("\n‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏:")
        run_command("docker logs app-with-leak", "–õ–æ–≥–∏ app-with-leak")
        run_command("docker logs app-without-leak", "–õ–æ–≥–∏ app-without-leak")
        sys.exit(1)
    
    # 9. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ —Ç–µ—Å—Ç—ã
    if not run_command("python -m pytest tests/test_demo.py -v --tb=short --timeout=120", "–î–µ–º–æ —Ç–µ—Å—Ç—ã"):
        print("\n‚ùå –¢–µ—Å—Ç—ã —É–ø–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏:")
        run_command("docker logs app-with-leak", "–õ–æ–≥–∏ app-with-leak")
        run_command("docker logs app-without-leak", "–õ–æ–≥–∏ app-without-leak")
        sys.exit(1)
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –î–µ–º–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è GitHub Actions")

if __name__ == "__main__":
    main()