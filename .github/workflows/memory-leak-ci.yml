name: üîç Memory Leak Detection CI

on:
  # –û—Å–Ω–æ–≤–Ω–æ–π workflow —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  workflow_dispatch:
    inputs:
      test_type:
        description: '–¢–∏–ø —Ç–µ—Å—Ç–æ–≤'
        required: true
        default: 'demo'
        type: choice
        options:
          - demo      # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–º–æ —Ç–µ—Å—Ç—ã (30 —Å–µ–∫)
          - quick     # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (1 –º–∏–Ω)
          - full      # –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã (10 –º–∏–Ω)
          - performance # –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
  
  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00 UTC
  schedule:
    - cron: '0 2 * * *'

# –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è GitHub Actions
permissions:
  contents: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  ALLURE_RESULTS_DIR: tests/allure-results

jobs:
  # ==========================================
  # JOB 1: –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–≤—Å–µ–≥–¥–∞)
  # ==========================================
  quick-tests:
    name: ‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (5 –º–∏–Ω)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: ÔøΩ Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name:  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        chmod +x scripts/install_deps.sh
        ./scripts/install_deps.sh
        
    - name: üî® –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
      run: |
        echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
        docker-compose build --parallel
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose up -d
        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        sleep 60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        docker-compose ps
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:"
        docker-compose logs --tail=10
        
    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
      run: |
        echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
        for i in {1..30}; do
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "‚úÖ App with leak –≥–æ—Ç–æ–≤"
            break
          fi
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ app with leak... ($i/30)"
          sleep 2
        done
        
        for i in {1..30}; do
          if curl -f http://localhost:5001/health 2>/dev/null; then
            echo "‚úÖ App without leak –≥–æ—Ç–æ–≤"
            break
          fi
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ app without leak... ($i/30)"
          sleep 2
        done
        
    - name: ‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫..."
        mkdir -p $ALLURE_RESULTS_DIR
        pytest tests/test_quick_demo.py -v -s \
          --alluredir=$ALLURE_RESULTS_DIR \
          --junitxml=quick-test-results.xml || true
          
    - name: üìä Upload Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-quick
        path: ${{ env.ALLURE_RESULTS_DIR }}/
        retention-days: 7
        
    - name: üìã –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
      uses: dorny/test-reporter@v1
      if: always()
      continue-on-error: true
      with:
        name: Quick Tests Results
        path: quick-test-results.xml
        reporter: java-junit
        
    - name: üßπ –û—á–∏—Å—Ç–∫–∞
      if: always()
      run: docker-compose down -v

  # ==========================================
  # JOB 2: –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ main)
  # ==========================================
  full-tests:
    name: üß™ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã (15 –º–∏–Ω)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'full')
    needs: quick-tests
    
    steps:
    - name: üì• Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: ÔøΩ Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        
    - name:  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        chmod +x scripts/install_deps.sh
        ./scripts/install_deps.sh
        
    - name:  –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
      run: |
        docker-compose build --parallel
        docker-compose up -d
        sleep 60  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        
    - name: üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      run: |
        echo "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–õ–ù–´–ï —Ç–µ—Å—Ç—ã –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏..."
        mkdir -p $ALLURE_RESULTS_DIR
        pytest tests/test_memory_leak.py -v -s \
          --alluredir=$ALLURE_RESULTS_DIR \
          --junitxml=full-test-results.xml || true
          
    - name: üìä Upload Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-full
        path: ${{ env.ALLURE_RESULTS_DIR }}/
        retention-days: 30
        
    - name: üìã –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
      uses: dorny/test-reporter@v1
      if: always()
      continue-on-error: true
      with:
        name: Full Tests Results
        path: full-test-results.xml
        reporter: java-junit
        
    - name: üßπ –û—á–∏—Å—Ç–∫–∞
      if: always()
      run: docker-compose down -v

  # ==========================================
  # JOB 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞
  # ==========================================
  allure-report:
    name: üìä Allure –æ—Ç—á–µ—Ç
    runs-on: ubuntu-latest
    if: always() && (needs.quick-tests.result == 'success' || needs.full-tests.result == 'success')
    needs: [quick-tests, full-tests]
    
    steps:
    - name: üì• Download Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      uses: actions/download-artifact@v4
      with:
        path: allure-results
        merge-multiple: true
      continue-on-error: true
        
    - name: ÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      id: check_results
      run: |
        if [ -d "allure-results" ] && [ "$(find allure-results -name '*.json' | wc -l)" -gt 0 ]; then
          echo "has_results=true" >> $GITHUB_OUTPUT
          echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        else
          echo "has_results=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç"
          mkdir -p allure-results
          echo '{"name":"No tests","status":"skipped"}' > allure-results/empty.json
        fi
        
    - name: ÔøΩüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: allure-results
        allure_report: allure-report
        gh_pages: gh-pages
        allure_history: allure-history
        
    - name: üöÄ Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-history
        destination_dir: allure-report

  # ==========================================
  # JOB 4: –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  # ==========================================
  performance-tests:
    name: ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'performance'
    
    steps:
    - name: üì• Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: ÔøΩ Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
      
    - name: ÔøΩüî® –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
      run: |
        docker-compose build --parallel
        docker-compose up -d
        sleep 30
        
    - name: ‚ö° Apache Bench –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      run: |
        sudo apt-get update && sudo apt-get install -y apache2-utils
        
        echo "üî• –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –° —É—Ç–µ—á–∫–æ–π"
        ab -n 1000 -c 10 -g leak-app.tsv http://localhost:5000/api/stress > leak-app-results.txt
        
        echo "üî• –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —É—Ç–µ—á–∫–∏"  
        ab -n 1000 -c 10 -g no-leak-app.tsv http://localhost:5001/api/stress > no-leak-app-results.txt
        
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        echo "=== –° –£–¢–ï–ß–ö–û–ô ==="
        tail -20 leak-app-results.txt
        echo "=== –ë–ï–ó –£–¢–ï–ß–ö–ò ==="
        tail -20 no-leak-app-results.txt
        
    - name: üìä Upload —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          *-results.txt
          *.tsv
        retention-days: 7
        
    - name: üßπ –û—á–∏—Å—Ç–∫–∞
      if: always()
      run: docker-compose down -v

  # ==========================================
  # JOB 5: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  # ==========================================
  security-scan:
    name: üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å Safety
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install safety bandit || echo "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Safety failed, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
        safety check -r requirements.txt --json --output safety-report.json || true
        bandit -r apps/ tests/ -f json -o bandit-report.json || true
        
    - name: üìä Upload —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        retention-days: 7

  # ==========================================
  # JOB 6: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  # ==========================================
  notify:
    name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    runs-on: ubuntu-latest
    if: always()
    needs: [quick-tests, full-tests, allure-report]
    
    steps:
    - name: üì¢ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      uses: 8398a7/action-slack@v3
      if: always()
      continue-on-error: true
      with:
        status: ${{ job.status }}
        channel: '#memory-leak-ci'
        text: |
          üîç Memory Leak Detection CI –∑–∞–≤–µ—Ä—à–µ–Ω
          
          üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤:
          ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã: ${{ needs.quick-tests.result }}
          ‚Ä¢ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${{ needs.full-tests.result }}
          ‚Ä¢ Allure –æ—Ç—á–µ—Ç: ${{ needs.allure-report.result }}
          
          üîó –û—Ç—á–µ—Ç: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report/
          
          –ö–æ–º–º–∏—Ç: ${{ github.sha }}
          –í–µ—Ç–∫–∞: ${{ github.ref }}
          –ê–≤—Ç–æ—Ä: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      uses: dawidd6/action-send-mail@v3
      if: failure()
      continue-on-error: true
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üî¥ Memory Leak CI Failed: ${{ github.repository }}"
        to: ${{ secrets.EMAIL_TO }}
        from: Memory Leak CI
        body: |
          –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ Memory Leak Detection CI
          
          –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
          –í–µ—Ç–∫–∞: ${{ github.ref }}
          –ö–æ–º–º–∏—Ç: ${{ github.sha }}
          –ê–≤—Ç–æ—Ä: ${{ github.actor }}
          
          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}