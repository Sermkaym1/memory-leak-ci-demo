"""
Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ fixtures –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""
import pytest
import docker
import time
import os
import requests
from typing import Generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞
docker_client = docker.from_env()


def wait_for_service_health(url: str, service_name: str, max_wait: int = 60) -> bool:
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ HTTP healthcheck
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–µ –∂–¥–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å {service_name} –Ω–∞ {url}")
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        try:
            response = requests.get(url, timeout=2)
            if response.status_code == 200:
                elapsed = time.time() - start_time
                print(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤ –∑–∞ {elapsed:.1f} —Å–µ–∫")
                return True
        except requests.exceptions.RequestException:
            pass
        
        print(f"‚è≥ {service_name} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥—É... ({int(time.time() - start_time)}—Å)")
        time.sleep(2)
    
    print(f"‚ùå {service_name} –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞ {max_wait} —Å–µ–∫")
    return False


@pytest.fixture(scope="session")
def ensure_services_running():
    """
    –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    –£–ú–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –∂–¥–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CI –æ–∫—Ä—É–∂–µ–Ω–∏—è –≥–¥–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    required_containers = [
        'app-with-leak',
        'app-without-leak'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    for container_name in required_containers:
        try:
            container = docker_client.containers.get(container_name)
            if container.status != 'running':
                print(f"‚ö†Ô∏è  {container_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...")
                container.start()
                time.sleep(2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
            else:
                print(f"‚úÖ {container_name} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except docker.errors.NotFound:
            # –í CI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø—Ä–æ–µ–∫—Ç–∞
            print(f"‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏")
            print("üîç –ü–æ–∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏...")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            all_containers = docker_client.containers.list(all=True)
            found = False
            for c in all_containers:
                if container_name in c.name or any(container_name in tag for tag in c.image.tags):
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {c.name} (—Å—Ç–∞—Ç—É—Å: {c.status})")
                    if c.status != 'running':
                        print(f"‚ö†Ô∏è  –ó–∞–ø—É—Å–∫–∞—é {c.name}...")
                        c.start()
                        time.sleep(2)
                    found = True
                    break
            
            if not found:
                print(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
                for c in all_containers:
                    print(f"  - {c.name} ({c.status})")
                print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker compose up -d app-with-leak app-without-leak")
    
    # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ HTTP
    print("\nüéØ –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π):")
    
    services_to_check = [
        ("http://localhost:5000/health", "App WITH leak"),
        ("http://localhost:5001/health", "App WITHOUT leak")
    ]
    
    all_ready = True
    for url, name in services_to_check:
        if not wait_for_service_health(url, name, max_wait=30):
            all_ready = False
    
    if not all_ready:
        pytest.fail("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    print("üöÄ –í–°–ï –°–ï–†–í–ò–°–´ –ì–û–¢–û–í–´! –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...\n")


@pytest.fixture
def app_with_leak_container(ensure_services_running) -> Generator:
    """
    Fixture –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —É—Ç–µ—á–∫–æ–π –ø–∞–º—è—Ç–∏
    –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    """
    container = None
    try:
        container = docker_client.containers.get('app-with-leak')
    except docker.errors.NotFound:
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
        all_containers = docker_client.containers.list(all=True)
        for c in all_containers:
            if 'app-with-leak' in c.name or 'app_with_leak' in c.name:
                container = c
                break
        
        if not container:
            pytest.fail("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä app-with-leak –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üî¥ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container.name} (–° –£–¢–ï–ß–ö–û–ô)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–¥–æ—Ä–æ–≤, –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if not wait_for_service_health("http://localhost:5000/health", "App WITH leak", max_wait=10):
        print("‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        container.restart()
        wait_for_service_health("http://localhost:5000/health", "App WITH leak", max_wait=20)
    
    yield container
    
    # Cleanup - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    print("‚úÖ –¢–µ—Å—Ç —Å —É—Ç–µ—á–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.fixture
def app_without_leak_container(ensure_services_running) -> Generator:
    """
    Fixture –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–µ–∑ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    """
    container = None
    try:
        container = docker_client.containers.get('app-without-leak')
    except docker.errors.NotFound:
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
        all_containers = docker_client.containers.list(all=True)
        for c in all_containers:
            if 'app-without-leak' in c.name or 'app_without_leak' in c.name:
                container = c
                break
        
        if not container:
            pytest.fail("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä app-without-leak –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container.name} (–ë–ï–ó –£–¢–ï–ß–ö–ò)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–¥–æ—Ä–æ–≤, –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if not wait_for_service_health("http://localhost:5001/health", "App WITHOUT leak", max_wait=10):
        print("‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        container.restart()
        wait_for_service_health("http://localhost:5001/health", "App WITHOUT leak", max_wait=20)
    
    yield container
    
    # Cleanup - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    print("‚úÖ –¢–µ—Å—Ç –±–µ–∑ —É—Ç–µ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def pytest_configure(config):
    """
    Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs("tests/allure-results", exist_ok=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    config.addinivalue_line("markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')")
    config.addinivalue_line("markers", "leak: marks tests that check for memory leaks")
