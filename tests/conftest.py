"""
Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ fixtures –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""
import pytest
import docker
import time
import os
from typing import Generator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞
docker_client = docker.from_env()


@pytest.fixture(scope="session")
def ensure_services_running():
    """
    –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    required_containers = [
        'app-with-leak',
        'app-without-leak',
        'postgres-leak-demo',
        'redis-leak-demo'
    ]
    
    for container_name in required_containers:
        try:
            container = docker_client.containers.get(container_name)
            if container.status != 'running':
                print(f"‚ö†Ô∏è  {container_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...")
                container.start()
                time.sleep(5)
            else:
                print(f"‚úÖ {container_name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except docker.errors.NotFound:
            pytest.fail(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d")
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫)...")
    time.sleep(30)
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã\n")


@pytest.fixture
def app_with_leak_container(ensure_services_running) -> Generator:
    """
    Fixture –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —É—Ç–µ—á–∫–æ–π –ø–∞–º—è—Ç–∏
    """
    container = docker_client.containers.get('app-with-leak')
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ app-with-leak –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    container.restart()
    time.sleep(10)
    
    yield container
    
    # Cleanup
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞...")


@pytest.fixture
def app_without_leak_container(ensure_services_running) -> Generator:
    """
    Fixture –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–µ–∑ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    """
    container = docker_client.containers.get('app-without-leak')
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ app-without-leak –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    container.restart()
    time.sleep(10)
    
    yield container
    
    # Cleanup
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞...")


def pytest_configure(config):
    """
    Pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Allure —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs("tests/allure-results", exist_ok=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    config.addinivalue_line("markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')")
    config.addinivalue_line("markers", "leak: marks tests that check for memory leaks")
