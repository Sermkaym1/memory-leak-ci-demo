"""
–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""
import pytest
import allure
import time
from tests.utils.memory_monitor import MemoryMonitor
from tests.utils.load_generator import LoadGenerator
from tests.utils.report_builder import ReportBuilder


@allure.feature('Quick Demo')
@allure.story('5-minute tests')
class TestQuickDemo:
    
    @allure.title('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –° —É—Ç–µ—á–∫–æ–π (5 –º–∏–Ω—É—Ç)')
    @allure.severity(allure.severity_level.NORMAL)
    @pytest.mark.timeout(420)  # 7 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
    def test_quick_with_leak(self, app_with_leak_container):
        """
        –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –° —É—Ç–µ—á–∫–æ–π - 5 –º–∏–Ω—É—Ç
        """
        container = app_with_leak_container
        duration = 300  # 5 –º–∏–Ω—É—Ç
        base_url = "http://localhost:5000"
        
        monitor = MemoryMonitor(container)
        load_gen = LoadGenerator(base_url)
        report = ReportBuilder()
        
        with allure.step("–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"):
            initial_memory = monitor.get_current_memory()
            allure.attach(
                f"RSS: {initial_memory['rss_mb']:.2f} MB\n"
                f"VMS: {initial_memory['vms_mb']:.2f} MB",
                name="–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step(f"üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–ì–†–£–ó–ö–ò {duration} —Å–µ–∫—É–Ω–¥"):
            memory_data = []
            start_time = time.time()
            
            print(f"\n{'='*60}")
            print(f"üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –° –£–¢–ï–ß–ö–û–ô")
            print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥ ({duration//60} –º–∏–Ω {duration%60} —Å–µ–∫)")
            print(f"üåê URL: {base_url}")
            print(f"üî• RPS: 3 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫")
            print(f"{'='*60}\n")
            
            load_gen.start(
                endpoints=['/api/cache', '/api/stress'],
                rps=3,  # –ú–µ–Ω—å—à–µ RPS –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                duration=duration
            )
            
            measurement_count = 0
            while time.time() - start_time < duration:
                mem = monitor.get_current_memory()
                elapsed = time.time() - start_time
                measurement_count += 1
                
                memory_data.append({
                    'time': elapsed,
                    'rss_mb': mem['rss_mb'],
                    'vms_mb': mem['vms_mb'],
                    'percent': mem['percent']
                })
                
                # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ù–ê–ë–õ–Æ–î–ê–ï–ú–û–°–¢–¨ - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if int(elapsed) % 30 == 0 or elapsed < 30:
                    progress = (elapsed / duration) * 100
                    remaining = duration - elapsed
                    print(f"üìä [{progress:5.1f}%] "
                          f"‚è±Ô∏è {int(elapsed):3d}—Å/{duration}—Å "
                          f"üìà RSS: {mem['rss_mb']:6.1f} MB "
                          f"üíæ VMS: {mem['vms_mb']:6.1f} MB "
                          f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining):3d}—Å "
                          f"üìè –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count}")
                
                time.sleep(10)  # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
            
            load_gen.stop()
            
            print(f"\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(memory_data)}")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫")
            print("="*60)
        
        with allure.step("–ê–Ω–∞–ª–∏–∑"):
            final_memory = monitor.get_current_memory()
            memory_growth = final_memory['rss_mb'] - initial_memory['rss_mb']
            
            chart_path = report.create_memory_chart(
                memory_data,
                title="Quick Test - App WITH Leak (5 min)",
                filename="quick_with_leak.png"
            )
            allure.attach.file(chart_path, name="–ì—Ä–∞—Ñ–∏–∫", attachment_type=allure.attachment_type.PNG)
            
            trend_analysis = report.analyze_trend(memory_data)
            
            allure.attach(
                f"–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB\n"
                f"–¢—Ä–µ–Ω–¥: {trend_analysis['trend']}\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å: {trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω",
                name="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                attachment_type=allure.attachment_type.TEXT
            )
            
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            is_leak = memory_growth > 20 and trend_analysis['trend'] == 'increasing'
            
            verdict = "üî¥ –£–¢–ï–ß–ö–ê" if is_leak else "üü¢ –û–ö"
            allure.attach(verdict, name="–í–µ—Ä–¥–∏–∫—Ç", attachment_type=allure.attachment_type.TEXT)
    
    
    @allure.title('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —É—Ç–µ—á–∫–∏ (5 –º–∏–Ω—É—Ç)')
    @allure.severity(allure.severity_level.NORMAL)
    @pytest.mark.timeout(420)
    def test_quick_without_leak(self, app_without_leak_container):
        """
        –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–ï–ó —É—Ç–µ—á–∫–∏ - 5 –º–∏–Ω—É—Ç
        """
        container = app_without_leak_container
        duration = 300
        base_url = "http://localhost:5001"
        
        monitor = MemoryMonitor(container)
        load_gen = LoadGenerator(base_url)
        report = ReportBuilder()
        
        with allure.step("–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"):
            initial_memory = monitor.get_current_memory()
        
        with allure.step(f"üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–ì–†–£–ó–ö–ò {duration} —Å–µ–∫—É–Ω–¥"):
            memory_data = []
            start_time = time.time()
            
            print(f"\n{'='*60}")
            print(f"üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ë–ï–ó –£–¢–ï–ß–ö–ò")
            print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥ ({duration//60} –º–∏–Ω {duration%60} —Å–µ–∫)")
            print(f"üåê URL: {base_url}")
            print(f"üî• RPS: 3 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫")
            print(f"{'='*60}\n")
            
            load_gen.start(
                endpoints=['/api/cache', '/api/stress'],
                rps=3,
                duration=duration
            )
            
            measurement_count = 0
            while time.time() - start_time < duration:
                mem = monitor.get_current_memory()
                elapsed = time.time() - start_time
                measurement_count += 1
                
                memory_data.append({
                    'time': elapsed,
                    'rss_mb': mem['rss_mb'],
                    'vms_mb': mem['vms_mb'],
                    'percent': mem['percent']
                })
                
                # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ù–ê–ë–õ–Æ–î–ê–ï–ú–û–°–¢–¨ - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if int(elapsed) % 30 == 0 or elapsed < 30:
                    progress = (elapsed / duration) * 100
                    remaining = duration - elapsed
                    print(f"üìä [{progress:5.1f}%] "
                          f"‚è±Ô∏è {int(elapsed):3d}—Å/{duration}—Å "
                          f"üìà RSS: {mem['rss_mb']:6.1f} MB "
                          f"üíæ VMS: {mem['vms_mb']:6.1f} MB "
                          f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining):3d}—Å "
                          f"üìè –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count}")
                
                time.sleep(10)
            
            load_gen.stop()
            
            print(f"\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(memory_data)}")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫")
            print("="*60)
        
        with allure.step("–ê–Ω–∞–ª–∏–∑"):
            final_memory = monitor.get_current_memory()
            memory_growth = final_memory['rss_mb'] - initial_memory['rss_mb']
            
            chart_path = report.create_memory_chart(
                memory_data,
                title="Quick Test - App WITHOUT Leak (5 min)",
                filename="quick_without_leak.png"
            )
            allure.attach.file(chart_path, name="–ì—Ä–∞—Ñ–∏–∫", attachment_type=allure.attachment_type.PNG)
            
            trend_analysis = report.analyze_trend(memory_data)
            
            allure.attach(
                f"–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB\n"
                f"–¢—Ä–µ–Ω–¥: {trend_analysis['trend']}\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å: {trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω",
                name="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                attachment_type=allure.attachment_type.TEXT
            )
            
            is_leak = memory_growth > 20 and trend_analysis['trend'] == 'increasing'
            verdict = "üî¥ –£–¢–ï–ß–ö–ê" if is_leak else "üü¢ –û–ö"
            allure.attach(verdict, name="–í–µ—Ä–¥–∏–∫—Ç", attachment_type=allure.attachment_type.TEXT)
