"""
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è Allure
"""
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ GUI
import matplotlib.pyplot as plt
import numpy as np
from typing import List, Dict
import os


class ReportBuilder:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    """
    
    def __init__(self, output_dir: str = "tests/allure-results"):
        """
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8-darkgrid')
    
    def create_memory_chart(self, data: List[Dict], title: str, filename: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        
        Args:
            data: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –∫–ª—é—á–∞–º–∏ 'time', 'rss_mb', 'vms_mb'
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not data:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = [d['time'] for d in data]  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        rss = [d['rss_mb'] for d in data]
        vms = [d.get('vms_mb', d['rss_mb']) for d in data]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(14, 8))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
        ax.plot(times, rss, label='RSS (Resident Set Size)', 
                linewidth=3, color='#e74c3c', marker='o', markersize=6)
        ax.plot(times, vms, label='VMS (Virtual Memory Size)', 
                linewidth=2, color='#3498db', marker='s', markersize=4, alpha=0.7)
        
        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è RSS
        if len(times) > 2:
            z = np.polyfit(times, rss, 1)
            p = np.poly1d(z)
            trend_mb_per_sec = z[0]
            trend_mb_per_min = trend_mb_per_sec * 60
            ax.plot(times, p(times), "--", label=f'–¢—Ä–µ–Ω–¥ RSS ({trend_mb_per_min:+.2f} MB/–º–∏–Ω)', 
                   linewidth=2, color='#c0392b', alpha=0.6)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ RSS
        ax.fill_between(times, min(rss) * 0.9, rss, alpha=0.15, color='#e74c3c')
        
        # üé® –£–õ–£–ß–®–ï–ù–ù–´–ï –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —É–º–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        rss_range = max(rss) - min(rss)
        time_range = max(times) - min(times)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        growth = rss[-1] - rss[0]
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ - –≤—Å–µ–≥–¥–∞ –∑–µ–ª–µ–Ω–∞—è (—Å—Ç–∞—Ä—Ç)
        start_y_offset = rss_range * 0.4 if rss[0] < np.median(rss) else -rss_range * 0.2
        ax.annotate(f'–ù–∞—á–∞–ª–æ: {rss[0]:.1f} MB', 
                   xy=(times[0], rss[0]), 
                   xytext=(times[0] + time_range * 0.15, rss[0] + start_y_offset),
                   arrowprops=dict(arrowstyle='->', color='green', lw=2),
                   fontsize=11, color='green', weight='bold',
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='lightgreen', alpha=0.7))
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –∫–æ–Ω—Ü–∞ - —Ü–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ—Å—Ç–∞
        if growth > 5.0:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç
            end_color = 'red'
            verdict = '–£–¢–ï–ß–ö–ê!'
            bg_color = 'mistyrose'
        elif growth > 2.0:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
            end_color = 'orange'
            verdict = '–†–æ—Å—Ç'
            bg_color = 'moccasin'
        else:  # –°—Ç–∞–±–∏–ª—å–Ω–æ
            end_color = 'darkgreen'
            verdict = '–ó–î–û–†–û–í–û!'
            bg_color = 'lightgreen'
        
        end_y_offset = rss_range * 0.4 if rss[-1] < np.median(rss) else -rss_range * 0.3
        ax.annotate(f'–ö–æ–Ω–µ—Ü: {rss[-1]:.1f} MB\n–†–æ—Å—Ç: +{growth:.1f} MB\n{verdict}', 
                   xy=(times[-1], rss[-1]), 
                   xytext=(times[-1] - time_range * 0.25, rss[-1] + end_y_offset),
                   arrowprops=dict(arrowstyle='->', color=end_color, lw=2),
                   fontsize=11, color=end_color, weight='bold',
                   bbox=dict(boxstyle='round,pad=0.4', facecolor=bg_color, alpha=0.8))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ —Å–µ—Ç–∫–∏
        ax.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12, weight='bold')
        ax.set_ylabel('–ü–∞–º—è—Ç—å (MB)', fontsize=12, weight='bold')
        ax.set_title(title, fontsize=14, weight='bold', pad=20)
        ax.legend(loc='upper left', fontsize=11)
        ax.grid(True, alpha=0.3, linestyle='--')
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Å–∏
        ax.set_xlim(min(times) - time_range * 0.05, max(times) + time_range * 0.05)
        ax.set_ylim(min(rss) - rss_range * 0.1, max(max(rss), max(vms)) + rss_range * 0.3)
        
        # üìä –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –≤–µ—Ä–¥–∏–∫—Ç–æ–º
        growth = rss[-1] - rss[0]
        duration_sec = times[-1] - times[0]
        duration_min = duration_sec / 60
        growth_rate_per_min = (growth / duration_min) if duration_min > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç –ø–æ —Ä–æ—Å—Ç—É
        if growth > 8.0:
            verdict_emoji = "üö®"
            verdict_text = "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–¢–ï–ß–ö–ê"
            info_bg_color = 'mistyrose'
        elif growth > 4.0:
            verdict_emoji = "üî¥" 
            verdict_text = "–£–¢–ï–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê"
            info_bg_color = 'moccasin'
        elif growth > 1.0:
            verdict_emoji = "‚ö†Ô∏è"
            verdict_text = "–ù–ï–ë–û–õ–¨–®–û–ô –†–û–°–¢"
            info_bg_color = 'lightyellow'
        else:
            verdict_emoji = "‚úÖ"
            verdict_text = "–°–¢–ê–ë–ò–õ–¨–ù–û"
            info_bg_color = 'lightgreen'
        
        info_text = f'üìä –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏:\n'
        info_text += f'{verdict_emoji} –í–µ—Ä–¥–∏–∫—Ç: {verdict_text}\n'
        info_text += f'üìà –†–æ—Å—Ç: {growth:+.2f} MB\n'
        info_text += f'‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {growth_rate_per_min:+.1f} MB/–º–∏–Ω\n'
        info_text += f'‚è±Ô∏è –í—Ä–µ–º—è: {duration_sec:.0f}—Å'
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª –Ω–∞–¥–ø–∏—Å–∏
        ax.text(0.98, 0.98, info_text, transform=ax.transAxes,
               fontsize=10, verticalalignment='top', horizontalalignment='right',
               bbox=dict(boxstyle='round,pad=0.5', facecolor=info_bg_color, alpha=0.9))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        filepath = os.path.join(self.output_dir, filename)
        plt.tight_layout()
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def create_comparison_chart(self, data_leak: List[Dict], data_no_leak: List[Dict], 
                                title: str, filename: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–≤—É—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        """
        if not data_leak or not data_no_leak:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times_leak = [d['time'] / 60 for d in data_leak]
        rss_leak = [d['rss_mb'] for d in data_leak]
        
        times_no_leak = [d['time'] / 60 for d in data_no_leak]
        rss_no_leak = [d['rss_mb'] for d in data_no_leak]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
        ax1.plot(times_leak, rss_leak, label='–° —É—Ç–µ—á–∫–æ–π –ø–∞–º—è—Ç–∏', 
                linewidth=2.5, color='#e74c3c', marker='o', markersize=4)
        ax1.plot(times_no_leak, rss_no_leak, label='–ë–µ–∑ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏', 
                linewidth=2.5, color='#27ae60', marker='s', markersize=4)
        
        ax1.fill_between(times_leak, 0, rss_leak, alpha=0.2, color='#e74c3c')
        ax1.fill_between(times_no_leak, 0, rss_no_leak, alpha=0.2, color='#27ae60')
        
        ax1.set_xlabel('–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', fontsize=12, weight='bold')
        ax1.set_ylabel('–ü–∞–º—è—Ç—å RSS (MB)', fontsize=12, weight='bold')
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏', fontsize=14, weight='bold')
        ax1.legend(loc='upper left', fontsize=11)
        ax1.grid(True, alpha=0.3, linestyle='--')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
        min_len = min(len(rss_leak), len(rss_no_leak))
        diff = [rss_leak[i] - rss_no_leak[i] for i in range(min_len)]
        times_diff = times_leak[:min_len]
        
        ax2.plot(times_diff, diff, label='–†–∞–∑–Ω–∏—Ü–∞ (Leak - No Leak)', 
                linewidth=2.5, color='#9b59b6', marker='D', markersize=4)
        ax2.fill_between(times_diff, 0, diff, alpha=0.3, color='#9b59b6')
        ax2.axhline(y=0, color='black', linestyle='-', linewidth=1)
        
        ax2.set_xlabel('–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', fontsize=12, weight='bold')
        ax2.set_ylabel('–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ (MB)', fontsize=12, weight='bold')
        ax2.set_title('–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏', fontsize=14, weight='bold')
        ax2.legend(loc='upper left', fontsize=11)
        ax2.grid(True, alpha=0.3, linestyle='--')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        growth_leak = rss_leak[-1] - rss_leak[0]
        growth_no_leak = rss_no_leak[-1] - rss_no_leak[0]
        
        info_text = f'üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
        info_text += f'–° —É—Ç–µ—á–∫–æ–π: +{growth_leak:.2f} MB\n'
        info_text += f'–ë–µ–∑ —É—Ç–µ—á–∫–∏: +{growth_no_leak:.2f} MB\n'
        info_text += f'–†–∞–∑–Ω–∏—Ü–∞: {growth_leak - growth_no_leak:.2f} MB\n'
        info_text += f'–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {growth_leak / max(growth_no_leak, 1):.2f}x'
        
        ax2.text(0.02, 0.98, info_text, transform=ax2.transAxes,
                fontsize=10, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        filepath = os.path.join(self.output_dir, filename)
        plt.tight_layout()
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def analyze_trend(self, data: List[Dict]) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        
        Returns:
            dict: {
                'trend': str,              # 'increasing', 'decreasing', 'stable'
                'growth_rate': float,      # MB/–º–∏–Ω
                'growth_coefficient': float,  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                'r_squared': float         # –ö–∞—á–µ—Å—Ç–≤–æ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            }
        """
        if len(data) < 3:
            return {
                'trend': 'insufficient_data',
                'growth_rate': 0.0,
                'growth_coefficient': 0.0,
                'r_squared': 0.0
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = np.array([d['time'] / 60 for d in data])  # –º–∏–Ω—É—Ç—ã
        memory = np.array([d['rss_mb'] for d in data])
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        coefficients = np.polyfit(times, memory, 1)
        slope = coefficients[0]  # –ù–∞–∫–ª–æ–Ω (MB/–º–∏–Ω)
        
        # R-squared
        p = np.poly1d(coefficients)
        y_pred = p(times)
        ss_res = np.sum((memory - y_pred) ** 2)
        ss_tot = np.sum((memory - np.mean(memory)) ** 2)
        r_squared = 1 - (ss_res / ss_tot) if ss_tot != 0 else 0
        
        # üî• –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ç–µ—á–∫–∏:
        total_growth = memory[-1] - memory[0]
        duration = times[-1] - times[0]
        avg_growth_rate = total_growth / duration if duration > 0 else 0
        
        # –î–ª—è –¥–µ–º–æ: –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1-2 MB –∑–∞ 30 —Å–µ–∫ = 2-4 MB/–º–∏–Ω
        # –£—Ç–µ—á–∫–∞: –±–æ–ª–µ–µ 10 MB/–º–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ 5 MB –∑–∞ 30 —Å–µ–∫
        if duration < 1.0:  # –ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if total_growth > 5.0:  # –ë–æ–ª–µ–µ 5 MB –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                trend = 'increasing'
            elif total_growth < -2.0:
                trend = 'decreasing'
            else:
                trend = 'stable'
        else:  # –ë–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            if slope > 10.0 or avg_growth_rate > 8.0:  # –ë–æ–ª–µ–µ 8-10 MB/–º–∏–Ω = —É—Ç–µ—á–∫–∞
                trend = 'increasing'
            elif slope < -3.0:
                trend = 'decreasing'
            else:
                trend = 'stable'
        
        return {
            'trend': trend,
            'growth_rate': avg_growth_rate,
            'growth_coefficient': slope,
            'r_squared': r_squared,
            'total_growth_mb': total_growth
        }
