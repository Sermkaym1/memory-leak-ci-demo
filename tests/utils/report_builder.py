"""
–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è Allure
"""
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ GUI
import matplotlib.pyplot as plt
import numpy as np
from typing import List, Dict
import os


class ReportBuilder:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    """
    
    def __init__(self, output_dir: str = "tests/allure-results"):
        """
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8-darkgrid')
    
    def create_memory_chart(self, data: List[Dict], title: str, filename: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        
        Args:
            data: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –∫–ª—é—á–∞–º–∏ 'time', 'rss_mb', 'vms_mb'
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not data:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = [d['time'] / 60 for d in data]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
        rss = [d['rss_mb'] for d in data]
        vms = [d.get('vms_mb', d['rss_mb']) for d in data]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig, ax = plt.subplots(figsize=(14, 8))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
        ax.plot(times, rss, label='RSS (Resident Set Size)', 
                linewidth=2, color='#e74c3c', marker='o', markersize=3)
        ax.plot(times, vms, label='VMS (Virtual Memory Size)', 
                linewidth=2, color='#3498db', marker='s', markersize=3, alpha=0.7)
        
        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è RSS
        if len(times) > 2:
            z = np.polyfit(times, rss, 1)
            p = np.poly1d(z)
            ax.plot(times, p(times), "--", label=f'–¢—Ä–µ–Ω–¥ RSS (–Ω–∞–∫–ª–æ–Ω: {z[0]:.2f} MB/–º–∏–Ω)', 
                   linewidth=2, color='#c0392b', alpha=0.6)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ RSS
        ax.fill_between(times, 0, rss, alpha=0.2, color='#e74c3c')
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
        ax.annotate(f'–ù–∞—á–∞–ª–æ: {rss[0]:.1f} MB', 
                   xy=(times[0], rss[0]), 
                   xytext=(times[0] + 0.5, rss[0] + 20),
                   arrowprops=dict(arrowstyle='->', color='green', lw=2),
                   fontsize=10, color='green', weight='bold')
        
        ax.annotate(f'–ö–æ–Ω–µ—Ü: {rss[-1]:.1f} MB\n–†–æ—Å—Ç: +{rss[-1] - rss[0]:.1f} MB', 
                   xy=(times[-1], rss[-1]), 
                   xytext=(times[-1] - 2, rss[-1] + 20),
                   arrowprops=dict(arrowstyle='->', color='red', lw=2),
                   fontsize=10, color='red', weight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ —Å–µ—Ç–∫–∏
        ax.set_xlabel('–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', fontsize=12, weight='bold')
        ax.set_ylabel('–ü–∞–º—è—Ç—å (MB)', fontsize=12, weight='bold')
        ax.set_title(title, fontsize=14, weight='bold', pad=20)
        ax.legend(loc='upper left', fontsize=11)
        ax.grid(True, alpha=0.3, linestyle='--')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ
        growth = rss[-1] - rss[0]
        duration = times[-1]
        growth_rate = growth / duration if duration > 0 else 0
        
        info_text = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
        info_text += f'–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {growth:.2f} MB\n'
        info_text += f'–°–∫–æ—Ä–æ—Å—Ç—å: {growth_rate:.2f} MB/–º–∏–Ω\n'
        info_text += f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} –º–∏–Ω'
        
        ax.text(0.02, 0.98, info_text, transform=ax.transAxes,
               fontsize=10, verticalalignment='top',
               bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        filepath = os.path.join(self.output_dir, filename)
        plt.tight_layout()
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def create_comparison_chart(self, data_leak: List[Dict], data_no_leak: List[Dict], 
                                title: str, filename: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–≤—É—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        """
        if not data_leak or not data_no_leak:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times_leak = [d['time'] / 60 for d in data_leak]
        rss_leak = [d['rss_mb'] for d in data_leak]
        
        times_no_leak = [d['time'] / 60 for d in data_no_leak]
        rss_no_leak = [d['rss_mb'] for d in data_no_leak]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
        ax1.plot(times_leak, rss_leak, label='–° —É—Ç–µ—á–∫–æ–π –ø–∞–º—è—Ç–∏', 
                linewidth=2.5, color='#e74c3c', marker='o', markersize=4)
        ax1.plot(times_no_leak, rss_no_leak, label='–ë–µ–∑ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏', 
                linewidth=2.5, color='#27ae60', marker='s', markersize=4)
        
        ax1.fill_between(times_leak, 0, rss_leak, alpha=0.2, color='#e74c3c')
        ax1.fill_between(times_no_leak, 0, rss_no_leak, alpha=0.2, color='#27ae60')
        
        ax1.set_xlabel('–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', fontsize=12, weight='bold')
        ax1.set_ylabel('–ü–∞–º—è—Ç—å RSS (MB)', fontsize=12, weight='bold')
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏', fontsize=14, weight='bold')
        ax1.legend(loc='upper left', fontsize=11)
        ax1.grid(True, alpha=0.3, linestyle='--')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
        min_len = min(len(rss_leak), len(rss_no_leak))
        diff = [rss_leak[i] - rss_no_leak[i] for i in range(min_len)]
        times_diff = times_leak[:min_len]
        
        ax2.plot(times_diff, diff, label='–†–∞–∑–Ω–∏—Ü–∞ (Leak - No Leak)', 
                linewidth=2.5, color='#9b59b6', marker='D', markersize=4)
        ax2.fill_between(times_diff, 0, diff, alpha=0.3, color='#9b59b6')
        ax2.axhline(y=0, color='black', linestyle='-', linewidth=1)
        
        ax2.set_xlabel('–í—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', fontsize=12, weight='bold')
        ax2.set_ylabel('–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–∞–º—è—Ç–∏ (MB)', fontsize=12, weight='bold')
        ax2.set_title('–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏', fontsize=14, weight='bold')
        ax2.legend(loc='upper left', fontsize=11)
        ax2.grid(True, alpha=0.3, linestyle='--')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        growth_leak = rss_leak[-1] - rss_leak[0]
        growth_no_leak = rss_no_leak[-1] - rss_no_leak[0]
        
        info_text = f'üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
        info_text += f'–° —É—Ç–µ—á–∫–æ–π: +{growth_leak:.2f} MB\n'
        info_text += f'–ë–µ–∑ —É—Ç–µ—á–∫–∏: +{growth_no_leak:.2f} MB\n'
        info_text += f'–†–∞–∑–Ω–∏—Ü–∞: {growth_leak - growth_no_leak:.2f} MB\n'
        info_text += f'–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {growth_leak / max(growth_no_leak, 1):.2f}x'
        
        ax2.text(0.02, 0.98, info_text, transform=ax2.transAxes,
                fontsize=10, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        filepath = os.path.join(self.output_dir, filename)
        plt.tight_layout()
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def analyze_trend(self, data: List[Dict]) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        
        Returns:
            dict: {
                'trend': str,              # 'increasing', 'decreasing', 'stable'
                'growth_rate': float,      # MB/–º–∏–Ω
                'growth_coefficient': float,  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                'r_squared': float         # –ö–∞—á–µ—Å—Ç–≤–æ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
            }
        """
        if len(data) < 3:
            return {
                'trend': 'insufficient_data',
                'growth_rate': 0.0,
                'growth_coefficient': 0.0,
                'r_squared': 0.0
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = np.array([d['time'] / 60 for d in data])  # –º–∏–Ω—É—Ç—ã
        memory = np.array([d['rss_mb'] for d in data])
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        coefficients = np.polyfit(times, memory, 1)
        slope = coefficients[0]  # –ù–∞–∫–ª–æ–Ω (MB/–º–∏–Ω)
        
        # R-squared
        p = np.poly1d(coefficients)
        y_pred = p(times)
        ss_res = np.sum((memory - y_pred) ** 2)
        ss_tot = np.sum((memory - np.mean(memory)) ** 2)
        r_squared = 1 - (ss_res / ss_tot) if ss_tot != 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if slope > 3.0:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 3 MB/–º–∏–Ω
            trend = 'increasing'
        elif slope < -3.0:
            trend = 'decreasing'
        else:
            trend = 'stable'
        
        # –û–±—â–∏–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
        total_growth = memory[-1] - memory[0]
        duration = times[-1] - times[0]
        avg_growth_rate = total_growth / duration if duration > 0 else 0
        
        return {
            'trend': trend,
            'growth_rate': avg_growth_rate,
            'growth_coefficient': slope,
            'r_squared': r_squared,
            'total_growth_mb': total_growth
        }
