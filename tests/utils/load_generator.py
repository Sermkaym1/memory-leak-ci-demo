"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
"""
import requests
import threading
import time
import random
from typing import List, Dict
from queue import Queue


class LoadGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTTP –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    def __init__(self, base_url: str):
        """
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:5000)
        """
        self.base_url = base_url
        self.stop_flag = False
        self.threads = []
        self.results_queue = Queue()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'successful': 0,
            'errors': 0,
            'response_times': [],
            'start_time': None,
            'end_time': None
        }
    
    def start(self, endpoints: List[str], rps: int = 5, duration: int = 600):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            endpoints: –°–ø–∏—Å–æ–∫ endpoint'–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            rps: –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (requests per second)
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–≥—Ä—É–∑–∫–∏:")
        print(f"   URL: {self.base_url}")
        print(f"   RPS: {rps}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫ ({duration/60:.1f} –º–∏–Ω)")
        print(f"   Endpoints: {endpoints}")
        
        self.stop_flag = False
        self.stats['start_time'] = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        for i in range(rps):
            thread = threading.Thread(
                target=self._worker,
                args=(endpoints, duration),
                daemon=True
            )
            thread.start()
            self.threads.append(thread)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            time.sleep(1.0 / rps)
    
    def _worker(self, endpoints: List[str], duration: int):
        """
        –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        start_time = time.time()
        
        while not self.stop_flag and (time.time() - start_time < duration):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π endpoint
                endpoint = random.choice(endpoints)
                url = f"{self.base_url}{endpoint}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                payload = self._generate_payload(endpoint)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                request_start = time.time()
                
                if endpoint in ['/api/cache', '/api/file', '/api/redis']:
                    response = requests.post(url, json=payload, timeout=5)
                else:
                    response = requests.get(url, timeout=5)
                
                response_time = time.time() - request_start
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.results_queue.put({
                    'endpoint': endpoint,
                    'status_code': response.status_code,
                    'response_time': response_time,
                    'success': response.status_code == 200
                })
                
                self.stats['total_requests'] += 1
                self.stats['response_times'].append(response_time)
                
                if response.status_code == 200:
                    self.stats['successful'] += 1
                else:
                    self.stats['errors'] += 1
                
            except Exception as e:
                self.stats['total_requests'] += 1
                self.stats['errors'] += 1
                self.results_queue.put({
                    'endpoint': endpoint,
                    'error': str(e),
                    'success': False
                })
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
            time.sleep(1)
    
    def _generate_payload(self, endpoint: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç payload –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        if endpoint == '/api/cache':
            return {
                'key': f'key_{random.randint(1, 1000)}',
                'value': 'x' * random.randint(100, 1000)
            }
        
        elif endpoint == '/api/file':
            return {
                'content': 'test data\n' * random.randint(10, 100)
            }
        
        elif endpoint == '/api/redis':
            return {
                'key': f'redis_key_{random.randint(1, 1000)}',
                'value': 'y' * random.randint(100, 1000)
            }
        
        return {}
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏
        """
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–≥—Ä—É–∑–∫–∏...")
        self.stop_flag = True
        self.stats['end_time'] = time.time()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.join(timeout=5)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_statistics(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.stats['response_times']:
            avg_response_time = 0.0
            min_response_time = 0.0
            max_response_time = 0.0
        else:
            avg_response_time = sum(self.stats['response_times']) / len(self.stats['response_times'])
            min_response_time = min(self.stats['response_times'])
            max_response_time = max(self.stats['response_times'])
        
        total_time = 0
        if self.stats['start_time'] and self.stats['end_time']:
            total_time = self.stats['end_time'] - self.stats['start_time']
        
        return {
            'total_requests': self.stats['total_requests'],
            'successful': self.stats['successful'],
            'errors': self.stats['errors'],
            'avg_response_time': avg_response_time,
            'min_response_time': min_response_time,
            'max_response_time': max_response_time,
            'total_duration': total_time,
            'actual_rps': self.stats['total_requests'] / total_time if total_time > 0 else 0
        }
