"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Memory Leak CI
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Slack, Teams, Email, Telegram
"""
import json
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime
import os


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏"""
    test_name: str
    status: str  # "passed", "failed", "error"
    duration_minutes: float
    memory_growth_mb: float
    leak_types: List[str]
    severity: str  # "low", "medium", "high", "critical"
    report_url: Optional[str] = None


class NotificationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–æ–≤
    """
    
    def __init__(self, config: Dict = None):
        self.config = config or {}
        
    def format_test_results(self, results: List[TestResult]) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        total_tests = len(results)
        passed = len([r for r in results if r.status == "passed"])
        failed = len([r for r in results if r.status == "failed"])
        errors = len([r for r in results if r.status == "error"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if errors > 0:
            overall_status = "üî¥ ERROR"
            status_emoji = "üî¥"
        elif failed > 0:
            overall_status = "‚ö†Ô∏è FAILED"
            status_emoji = "‚ö†Ô∏è"
        else:
            overall_status = "‚úÖ PASSED"
            status_emoji = "‚úÖ"
        
        # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–µ—á–∫–∏
        critical_leaks = [r for r in results if r.severity == "critical"]
        high_leaks = [r for r in results if r.severity == "high"]
        
        return {
            "overall_status": overall_status,
            "status_emoji": status_emoji,
            "stats": {
                "total": total_tests,
                "passed": passed,  
                "failed": failed,
                "errors": errors
            },
            "critical_leaks": len(critical_leaks),
            "high_leaks": len(high_leaks),
            "results": results
        }
    
    def send_slack_notification(self, results: List[TestResult], webhook_url: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack"""
        
        formatted = self.format_test_results(results)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º
        test_details = []
        for result in results:
            emoji = "‚úÖ" if result.status == "passed" else "‚ùå" if result.status == "failed" else "‚ö†Ô∏è"
            leak_info = f" (–£—Ç–µ—á–∫–∏: {', '.join(result.leak_types)})" if result.leak_types else ""
            test_details.append(
                f"{emoji} *{result.test_name}* - {result.duration_minutes:.1f}–º, "
                f"–ø–∞–º—è—Ç—å: {result.memory_growth_mb:+.1f}MB{leak_info}"
            )
        
        # Slack message payload
        payload = {
            "username": "Memory Leak CI Bot",
            "icon_emoji": ":mag:",
            "attachments": [
                {
                    "color": "good" if formatted["overall_status"].startswith("‚úÖ") else "danger",
                    "title": f"{formatted['status_emoji']} Memory Leak Detection CI Results",
                    "fields": [
                        {
                            "title": "–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å",
                            "value": formatted["overall_status"],
                            "short": True
                        },
                        {
                            "title": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            "value": f"–í—Å–µ–≥–æ: {formatted['stats']['total']}\n"
                                   f"‚úÖ –ü—Ä–æ—à–ª–∏: {formatted['stats']['passed']}\n"
                                   f"‚ùå –£–ø–∞–ª–∏: {formatted['stats']['failed']}\n"
                                   f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {formatted['stats']['errors']}",
                            "short": True
                        },
                        {
                            "title": "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–µ—á–∫–∏",
                            "value": f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: {formatted['critical_leaks']}\n"
                                   f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ: {formatted['high_leaks']}",
                            "short": True
                        },
                        {
                            "title": "–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤",
                            "value": "\n".join(test_details[:5]) + ("\n..." if len(test_details) > 5 else ""),
                            "short": False
                        }
                    ],
                    "footer": "Memory Leak CI",
                    "ts": int(datetime.now().timestamp())
                }
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if any(r.report_url for r in results):
            report_url = next(r.report_url for r in results if r.report_url)
            payload["attachments"][0]["fields"].append({
                "title": "üìä Allure –æ—Ç—á–µ—Ç",
                "value": f"<{report_url}|–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç>",
                "short": False
            })
        
        try:
            response = requests.post(webhook_url, json=payload, timeout=10)
            response.raise_for_status()
            print("‚úÖ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack: {e}")
    
    def send_teams_notification(self, results: List[TestResult], webhook_url: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Microsoft Teams"""
        
        formatted = self.format_test_results(results)
        
        # Teams adaptive card
        card = {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "00FF00" if formatted["overall_status"].startswith("‚úÖ") else "FF0000",
            "summary": "Memory Leak CI Results",
            "sections": [
                {
                    "activityTitle": f"{formatted['status_emoji']} Memory Leak Detection CI",
                    "activitySubtitle": f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                    "facts": [
                        {"name": "–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", "value": formatted["overall_status"]},
                        {"name": "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤", "value": str(formatted['stats']['total'])},
                        {"name": "–ü—Ä–æ—à–ª–∏", "value": str(formatted['stats']['passed'])},
                        {"name": "–£–ø–∞–ª–∏", "value": str(formatted['stats']['failed'])},
                        {"name": "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–µ—á–∫–∏", "value": str(formatted['critical_leaks'])},
                        {"name": "–í—ã—Å–æ–∫–∏–µ —É—Ç–µ—á–∫–∏", "value": str(formatted['high_leaks'])}
                    ],
                    "markdown": True
                }
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤
        test_summary = []
        for result in results[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ç–µ—Å—Ç–∞
            emoji = "‚úÖ" if result.status == "passed" else "‚ùå"
            test_summary.append(f"{emoji} {result.test_name}: {result.memory_growth_mb:+.1f}MB")
        
        if test_summary:
            card["sections"].append({
                "title": "–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤",
                "text": "\n\n".join(test_summary)
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–∞
        if any(r.report_url for r in results):
            report_url = next(r.report_url for r in results if r.report_url)
            card["potentialAction"] = [
                {
                    "@type": "OpenUri",
                    "name": "üìä –û—Ç–∫—Ä—ã—Ç—å Allure –æ—Ç—á–µ—Ç",
                    "targets": [{"os": "default", "uri": report_url}]
                }
            ]
        
        try:
            response = requests.post(webhook_url, json=card, timeout=10)
            response.raise_for_status()
            print("‚úÖ Teams —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Teams: {e}")
    
    def send_email_notification(self, results: List[TestResult], 
                              smtp_config: Dict, to_emails: List[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        
        formatted = self.format_test_results(results)
        
        # HTML email template
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif;">
            <h2>{formatted['status_emoji']} Memory Leak Detection CI Results</h2>
            
            <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <ul>
                    <li><strong>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</strong> {formatted['overall_status']}</li>
                    <li><strong>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</strong> {formatted['stats']['total']}</li>
                    <li><strong>‚úÖ –ü—Ä–æ—à–ª–∏:</strong> {formatted['stats']['passed']}</li>
                    <li><strong>‚ùå –£–ø–∞–ª–∏:</strong> {formatted['stats']['failed']}</li>
                    <li><strong>‚ö†Ô∏è –û—à–∏–±–∫–∏:</strong> {formatted['stats']['errors']}</li>
                    <li><strong>üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–µ—á–∫–∏:</strong> {formatted['critical_leaks']}</li>
                    <li><strong>‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ —É—Ç–µ—á–∫–∏:</strong> {formatted['high_leaks']}</li>
                </ul>
            </div>
            
            <h3>üìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤</h3>
            <table border="1" style="border-collapse: collapse; width: 100%;">
                <tr style="background-color: #f0f0f0;">
                    <th style="padding: 8px;">–¢–µ—Å—Ç</th>
                    <th style="padding: 8px;">–°—Ç–∞—Ç—É—Å</th>
                    <th style="padding: 8px;">–í—Ä–µ–º—è</th>
                    <th style="padding: 8px;">–†–æ—Å—Ç –ø–∞–º—è—Ç–∏</th>
                    <th style="padding: 8px;">–£—Ç–µ—á–∫–∏</th>
                    <th style="padding: 8px;">–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å</th>
                </tr>
        """
        
        for result in results:
            status_color = "green" if result.status == "passed" else "red"
            html_body += f"""
                <tr>
                    <td style="padding: 8px;">{result.test_name}</td>
                    <td style="padding: 8px; color: {status_color};">{result.status.upper()}</td>
                    <td style="padding: 8px;">{result.duration_minutes:.1f}–º</td>
                    <td style="padding: 8px;">{result.memory_growth_mb:+.1f} MB</td>
                    <td style="padding: 8px;">{', '.join(result.leak_types) if result.leak_types else '–Ω–µ—Ç'}</td>
                    <td style="padding: 8px;">{result.severity}</td>
                </tr>
            """
        
        html_body += """
            </table>
            
            <p style="margin-top: 20px; color: #666;">
                –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Memory Leak Detection CI<br>
                –í—Ä–µ–º—è: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """
            </p>
        </body>
        </html>
        """
        
        # –°–æ–∑–¥–∞–µ–º email
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"{formatted['status_emoji']} Memory Leak CI: {formatted['overall_status']}"
        msg['From'] = smtp_config.get('from', 'memory-leak-ci@example.com')
        msg['To'] = ', '.join(to_emails)
        
        # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
        html_part = MIMEText(html_body, 'html')
        msg.attach(html_part)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            with smtplib.SMTP(smtp_config['server'], smtp_config['port']) as server:
                if smtp_config.get('use_tls'):
                    server.starttls()
                if smtp_config.get('username'):
                    server.login(smtp_config['username'], smtp_config['password'])
                
                server.send_message(msg)
            
            print(f"‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {len(to_emails)} –∞–¥—Ä–µ—Å–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
    
    def send_all_notifications(self, results: List[TestResult]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        # Slack
        if slack_webhook := os.getenv('SLACK_WEBHOOK_URL'):
            self.send_slack_notification(results, slack_webhook)
        
        # Teams  
        if teams_webhook := os.getenv('TEAMS_WEBHOOK_URL'):
            self.send_teams_notification(results, teams_webhook)
        
        # Email
        if all([os.getenv('SMTP_SERVER'), os.getenv('SMTP_FROM'), os.getenv('EMAIL_TO')]):
            smtp_config = {
                'server': os.getenv('SMTP_SERVER'),
                'port': int(os.getenv('SMTP_PORT', 587)),
                'username': os.getenv('SMTP_USERNAME'),
                'password': os.getenv('SMTP_PASSWORD'),
                'from': os.getenv('SMTP_FROM'),
                'use_tls': os.getenv('SMTP_USE_TLS', 'true').lower() == 'true'
            }
            to_emails = os.getenv('EMAIL_TO').split(',')
            self.send_email_notification(results, smtp_config, to_emails)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    demo_results = [
        TestResult(
            test_name="test_app_with_leak_10min",
            status="failed",
            duration_minutes=10.2,
            memory_growth_mb=127.5,
            leak_types=["memory_leak", "connection_leak"],
            severity="critical",
            report_url="https://example.com/allure-report"
        ),
        TestResult(
            test_name="test_app_without_leak_10min", 
            status="passed",
            duration_minutes=10.1,
            memory_growth_mb=5.2,
            leak_types=[],
            severity="low"
        )
    ]
    
    # –î–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifier = NotificationManager()
    
    print("üìß –î–µ–º–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    formatted = notifier.format_test_results(demo_results)
    print(json.dumps(formatted, indent=2, ensure_ascii=False))