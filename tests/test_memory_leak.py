"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
–¢–µ—Å—Ç—ã –¥–ª—è—Ç—Å—è 10-15 –º–∏–Ω—É—Ç –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
"""
import pytest
import allure
import time
from utils.memory_monitor import MemoryMonitor
from utils.load_generator import LoadGenerator
from utils.report_builder import ReportBuilder


@allure.feature('Memory Leak Detection')
@allure.story('Long Running Tests')
class TestMemoryLeakDetection:
    
    @allure.title('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –° —É—Ç–µ—á–∫–æ–π (10 –º–∏–Ω—É—Ç)')
    @allure.description('''
    –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É—Ç–µ—á–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤—Å–µ endpoints —Å —É—Ç–µ—á–∫–∞–º–∏:
    - /api/cache - —É—Ç–µ—á–∫–∞ –∫–µ—à–∞
    - /api/database - –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    - /api/file - —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
    - /api/redis - Redis connection pool
    
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ > 50 MB
    ''')
    @allure.severity(allure.severity_level.CRITICAL)
    @pytest.mark.leak
    @pytest.mark.timeout(720)  # 12 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç (10 –º–∏–Ω —Ç–µ—Å—Ç + –∑–∞–ø–∞—Å)
    def test_app_with_leak_10min(self, app_with_leak_container):
        """
        –¢–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –° —É—Ç–µ—á–∫–æ–π - 10 –º–∏–Ω—É—Ç
        """
        container = app_with_leak_container
        duration = 600  # 10 –º–∏–Ω—É—Ç
        base_url = "http://localhost:5000"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        monitor = MemoryMonitor(container)
        load_gen = LoadGenerator(base_url)
        report = ReportBuilder()
        
        with allure.step("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ - –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"):
            initial_memory = monitor.get_current_memory()
            allure.attach(
                f"RSS: {initial_memory['rss_mb']:.2f} MB\n"
                f"VMS: {initial_memory['vms_mb']:.2f} MB",
                name="–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥"):
            memory_data = []
            start_time = time.time()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            load_gen.start(
                endpoints=['/api/cache', '/api/database', '/api/file', '/api/stress'],
                rps=5,  # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
                duration=duration
            )
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            while time.time() - start_time < duration:
                mem = monitor.get_current_memory()
                elapsed = time.time() - start_time
                
                memory_data.append({
                    'time': elapsed,
                    'rss_mb': mem['rss_mb'],
                    'vms_mb': mem['vms_mb'],
                    'percent': mem['percent']
                })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if int(elapsed) % 60 == 0:
                    print(f"‚è±Ô∏è  {int(elapsed/60)} –º–∏–Ω: RSS={mem['rss_mb']:.2f} MB, "
                          f"VMS={mem['vms_mb']:.2f} MB, CPU={mem['percent']:.1f}%")
                
                time.sleep(5)
            
            load_gen.stop()
        
        with allure.step("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
            final_memory = monitor.get_current_memory()
            memory_growth = final_memory['rss_mb'] - initial_memory['rss_mb']
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
            chart_path = report.create_memory_chart(
                memory_data,
                title="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - App WITH Leak (10 min)",
                filename="memory_with_leak_10min.png"
            )
            allure.attach.file(chart_path, name="–ì—Ä–∞—Ñ–∏–∫ –ø–∞–º—è—Ç–∏", attachment_type=allure.attachment_type.PNG)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            trend_analysis = report.analyze_trend(memory_data)
            allure.attach(
                f"–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB\n"
                f"–¢—Ä–µ–Ω–¥: {trend_analysis['trend']}\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω\n"
                f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {trend_analysis['growth_coefficient']:.4f}",
                name="–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞",
                attachment_type=allure.attachment_type.TEXT
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            load_stats = load_gen.get_statistics()
            allure.attach(
                f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {load_stats['total_requests']}\n"
                f"–£—Å–ø–µ—à–Ω—ã—Ö: {load_stats['successful']}\n"
                f"–û—à–∏–±–æ–∫: {load_stats['errors']}\n"
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {load_stats['avg_response_time']:.3f} —Å–µ–∫",
                name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–í–µ—Ä–¥–∏–∫—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–∏ —É—Ç–µ—á–∫–∞?"):
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Ç–µ—á–∫–∏:
            # 1. –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ > 50 MB
            # 2. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            # 3. –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ > 3 MB/–º–∏–Ω
            
            is_leak = (
                memory_growth > 50 and
                trend_analysis['trend'] == 'increasing' and
                trend_analysis['growth_rate'] > 3.0
            )
            
            verdict = "üî¥ –£–¢–ï–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê" if is_leak else "üü¢ –£—Ç–µ—á–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
            
            allure.attach(
                f"{verdict}\n\n"
                f"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
                f"‚úì –†–æ—Å—Ç > 50 MB: {'–î–ê' if memory_growth > 50 else '–ù–ï–¢'} ({memory_growth:.2f} MB)\n"
                f"‚úì –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ç—É—â–∏–π: {'–î–ê' if trend_analysis['trend'] == 'increasing' else '–ù–ï–¢'}\n"
                f"‚úì –°–∫–æ—Ä–æ—Å—Ç—å > 3 MB/–º–∏–Ω: {'–î–ê' if trend_analysis['growth_rate'] > 3.0 else '–ù–ï–¢'} "
                f"({trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω)",
                name="üéØ –í–ï–†–î–ò–ö–¢",
                attachment_type=allure.attachment_type.TEXT
            )
            
            # –û–∂–∏–¥–∞–µ–º –Ω–∞–π—Ç–∏ —É—Ç–µ—á–∫—É
            assert is_leak, f"–û–∂–∏–¥–∞–ª–∞—Å—å —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏, –Ω–æ —Ä–æ—Å—Ç –≤—Å–µ–≥–æ {memory_growth:.2f} MB"
    
    
    @allure.title('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —É—Ç–µ—á–∫–∏ (10 –º–∏–Ω—É—Ç)')
    @allure.description('''
    –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ endpoints:
    - /api/cache - cache —Å TTL
    - /api/database - connection pool
    - /api/file - context managers
    - /api/redis - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç
    
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (< 30 MB —Ä–æ—Å—Ç–∞)
    ''')
    @allure.severity(allure.severity_level.CRITICAL)
    @pytest.mark.leak
    @pytest.mark.timeout(720)
    def test_app_without_leak_10min(self, app_without_leak_container):
        """
        –¢–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–ï–ó —É—Ç–µ—á–∫–∏ - 10 –º–∏–Ω—É—Ç
        """
        container = app_without_leak_container
        duration = 600  # 10 –º–∏–Ω—É—Ç
        base_url = "http://localhost:5001"
        
        monitor = MemoryMonitor(container)
        load_gen = LoadGenerator(base_url)
        report = ReportBuilder()
        
        with allure.step("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ - –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"):
            initial_memory = monitor.get_current_memory()
            allure.attach(
                f"RSS: {initial_memory['rss_mb']:.2f} MB\n"
                f"VMS: {initial_memory['vms_mb']:.2f} MB",
                name="–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥"):
            memory_data = []
            start_time = time.time()
            
            load_gen.start(
                endpoints=['/api/cache', '/api/database', '/api/file', '/api/stress'],
                rps=5,
                duration=duration
            )
            
            while time.time() - start_time < duration:
                mem = monitor.get_current_memory()
                elapsed = time.time() - start_time
                
                memory_data.append({
                    'time': elapsed,
                    'rss_mb': mem['rss_mb'],
                    'vms_mb': mem['vms_mb'],
                    'percent': mem['percent']
                })
                
                if int(elapsed) % 60 == 0:
                    print(f"‚è±Ô∏è  {int(elapsed/60)} –º–∏–Ω: RSS={mem['rss_mb']:.2f} MB, "
                          f"VMS={mem['vms_mb']:.2f} MB, CPU={mem['percent']:.1f}%")
                
                time.sleep(5)
            
            load_gen.stop()
        
        with allure.step("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
            final_memory = monitor.get_current_memory()
            memory_growth = final_memory['rss_mb'] - initial_memory['rss_mb']
            
            chart_path = report.create_memory_chart(
                memory_data,
                title="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - App WITHOUT Leak (10 min)",
                filename="memory_without_leak_10min.png"
            )
            allure.attach.file(chart_path, name="–ì—Ä–∞—Ñ–∏–∫ –ø–∞–º—è—Ç–∏", attachment_type=allure.attachment_type.PNG)
            
            trend_analysis = report.analyze_trend(memory_data)
            allure.attach(
                f"–†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.2f} MB\n"
                f"–¢—Ä–µ–Ω–¥: {trend_analysis['trend']}\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω\n"
                f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {trend_analysis['growth_coefficient']:.4f}",
                name="–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞",
                attachment_type=allure.attachment_type.TEXT
            )
            
            load_stats = load_gen.get_statistics()
            allure.attach(
                f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {load_stats['total_requests']}\n"
                f"–£—Å–ø–µ—à–Ω—ã—Ö: {load_stats['successful']}\n"
                f"–û—à–∏–±–æ–∫: {load_stats['errors']}\n"
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {load_stats['avg_response_time']:.3f} —Å–µ–∫",
                name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–í–µ—Ä–¥–∏–∫—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–∏ —É—Ç–µ—á–∫–∞?"):
            is_leak = (
                memory_growth > 50 and
                trend_analysis['trend'] == 'increasing' and
                trend_analysis['growth_rate'] > 3.0
            )
            
            verdict = "üî¥ –£–¢–ï–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê" if is_leak else "üü¢ –£—Ç–µ—á–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
            
            allure.attach(
                f"{verdict}\n\n"
                f"–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
                f"‚úì –†–æ—Å—Ç > 50 MB: {'–î–ê' if memory_growth > 50 else '–ù–ï–¢'} ({memory_growth:.2f} MB)\n"
                f"‚úì –¢—Ä–µ–Ω–¥ —Ä–∞—Å—Ç—É—â–∏–π: {'–î–ê' if trend_analysis['trend'] == 'increasing' else '–ù–ï–¢'}\n"
                f"‚úì –°–∫–æ—Ä–æ—Å—Ç—å > 3 MB/–º–∏–Ω: {'–î–ê' if trend_analysis['growth_rate'] > 3.0 else '–ù–ï–¢'} "
                f"({trend_analysis['growth_rate']:.2f} MB/–º–∏–Ω)",
                name="üéØ –í–ï–†–î–ò–ö–¢",
                attachment_type=allure.attachment_type.TEXT
            )
            
            # –ù–ï –æ–∂–∏–¥–∞–µ–º –Ω–∞–π—Ç–∏ —É—Ç–µ—á–∫—É
            assert not is_leak, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: —Ä–æ—Å—Ç {memory_growth:.2f} MB"
    
    
    @allure.title('–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - 15 –º–∏–Ω—É—Ç')
    @allure.description('–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è')
    @allure.severity(allure.severity_level.NORMAL)
    @pytest.mark.slow
    @pytest.mark.timeout(1080)  # 18 –º–∏–Ω—É—Ç
    def test_comparative_15min(self, app_with_leak_container, app_without_leak_container):
        """
        –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±–æ–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - 15 –º–∏–Ω—É—Ç
        """
        duration = 900  # 15 –º–∏–Ω—É—Ç
        
        # –ú–æ–Ω–∏—Ç–æ—Ä—ã
        monitor_leak = MemoryMonitor(app_with_leak_container)
        monitor_no_leak = MemoryMonitor(app_without_leak_container)
        
        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞–≥—Ä—É–∑–∫–∏
        load_leak = LoadGenerator("http://localhost:5000")
        load_no_leak = LoadGenerator("http://localhost:5001")
        
        report = ReportBuilder()
        
        with allure.step("–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"):
            data_leak = []
            data_no_leak = []
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ–±–∞
            load_leak.start(
                endpoints=['/api/cache', '/api/database', '/api/file', '/api/stress'],
                rps=5,
                duration=duration
            )
            load_no_leak.start(
                endpoints=['/api/cache', '/api/database', '/api/file', '/api/stress'],
                rps=5,
                duration=duration
            )
            
            start_time = time.time()
            
            while time.time() - start_time < duration:
                elapsed = time.time() - start_time
                
                mem_leak = monitor_leak.get_current_memory()
                mem_no_leak = monitor_no_leak.get_current_memory()
                
                data_leak.append({
                    'time': elapsed,
                    'rss_mb': mem_leak['rss_mb'],
                    'vms_mb': mem_leak['vms_mb']
                })
                
                data_no_leak.append({
                    'time': elapsed,
                    'rss_mb': mem_no_leak['rss_mb'],
                    'vms_mb': mem_no_leak['vms_mb']
                })
                
                if int(elapsed) % 60 == 0:
                    print(f"‚è±Ô∏è  {int(elapsed/60)} –º–∏–Ω:")
                    print(f"   WITH leak: RSS={mem_leak['rss_mb']:.2f} MB")
                    print(f"   WITHOUT leak: RSS={mem_no_leak['rss_mb']:.2f} MB")
                
                time.sleep(5)
            
            load_leak.stop()
            load_no_leak.stop()
        
        with allure.step("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
            # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            chart_path = report.create_comparison_chart(
                data_leak,
                data_no_leak,
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ (15 min)",
                filename="memory_comparison_15min.png"
            )
            allure.attach.file(chart_path, name="–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", attachment_type=allure.attachment_type.PNG)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            trend_leak = report.analyze_trend(data_leak)
            trend_no_leak = report.analyze_trend(data_no_leak)
            
            growth_leak = data_leak[-1]['rss_mb'] - data_leak[0]['rss_mb']
            growth_no_leak = data_no_leak[-1]['rss_mb'] - data_no_leak[0]['rss_mb']
            
            allure.attach(
                f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n\n"
                f"–° –£–¢–ï–ß–ö–û–ô:\n"
                f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {growth_leak:.2f} MB\n"
                f"  –°–∫–æ—Ä–æ—Å—Ç—å: {trend_leak['growth_rate']:.2f} MB/–º–∏–Ω\n"
                f"  –¢—Ä–µ–Ω–¥: {trend_leak['trend']}\n\n"
                f"–ë–ï–ó –£–¢–ï–ß–ö–ò:\n"
                f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {growth_no_leak:.2f} MB\n"
                f"  –°–∫–æ—Ä–æ—Å—Ç—å: {trend_no_leak['growth_rate']:.2f} MB/–º–∏–Ω\n"
                f"  –¢—Ä–µ–Ω–¥: {trend_no_leak['trend']}\n\n"
                f"–†–ê–ó–ù–ò–¶–ê:\n"
                f"  –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {growth_leak - growth_no_leak:.2f} MB\n"
                f"  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {growth_leak / max(growth_no_leak, 1):.2f}x",
                name="üìà –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                attachment_type=allure.attachment_type.TEXT
            )
