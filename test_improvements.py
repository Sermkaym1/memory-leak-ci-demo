#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –±–µ–∑ Docker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ —Å Python
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

def test_memory_monitor_output():
    """–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ MemoryMonitor –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–∞—Ö")
    print("="*60)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç
    duration = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
    start_time = time.time()
    measurement_count = 0
    
    print(f"\nüéØ –ù–ê–ß–ò–ù–ê–ï–ú –î–ï–ú–û –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê")
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
    print(f"üåê URL: http://localhost:5000 (–¥–µ–º–æ)")
    print(f"üî• RPS: 3 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫")
    print("="*60 + "\n")
    
    while time.time() - start_time < duration:
        elapsed = time.time() - start_time
        measurement_count += 1
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ —Å —Ä–æ—Å—Ç–æ–º (—É—Ç–µ—á–∫–∞)
        fake_rss = 50.0 + (elapsed * 2)  # –†–æ—Å—Ç 2 MB –≤ —Å–µ–∫—É–Ω–¥—É
        fake_vms = 200.0 + (elapsed * 1.5)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        if int(elapsed) % 5 == 0 or elapsed < 5:
            progress = (elapsed / duration) * 100
            remaining = duration - elapsed
            print(f"üìä [{progress:5.1f}%] "
                  f"‚è±Ô∏è {int(elapsed):3d}—Å/{duration}—Å "
                  f"üìà RSS: {fake_rss:6.1f} MB "
                  f"üíæ VMS: {fake_vms:6.1f} MB "
                  f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(remaining):3d}—Å "
                  f"üìè –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count}")
        
        time.sleep(1)
    
    print(f"\nüèÅ –î–ï–ú–û –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫")
    print("="*60)
    
    memory_growth = fake_rss - 50.0
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"üî¥ –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_growth:.1f} MB")
    print(f"üî¥ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {memory_growth/(elapsed/60):.1f} MB/–º–∏–Ω")
    print(f"üéØ –í–µ—Ä–¥–∏–∫—Ç: {'–£–¢–ï–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê' if memory_growth > 20 else '–û–ö'}")


def test_report_builder():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–∞–º—è—Ç–∏")
    print("="*60)
    
    try:
        from tests.utils.report_builder import ReportBuilder
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        memory_data = []
        for i in range(30):
            memory_data.append({
                'time': i * 10,  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                'rss_mb': 50 + i * 2,  # —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
                'vms_mb': 200 + i * 1.5,
                'percent': 15.0
            })
        
        report = ReportBuilder()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = report.analyze_trend(memory_data)
        print(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:")
        print(f"  –¢—Ä–µ–Ω–¥: {trend['trend']}")
        print(f"  –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {trend['growth_rate']:.2f} MB/–º–∏–Ω")
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞: {trend['growth_coefficient']:.4f}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_path = report.create_memory_chart(
            memory_data,
            title="–î–µ–º–æ: –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            filename="demo_memory_chart.png"
        )
        
        if os.path.exists(chart_path):
            print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {chart_path}")
        else:
            print("‚ùå –ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ReportBuilder: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib: pip install matplotlib")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def test_smart_health_check():
    """–¢–µ—Å—Ç —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ 3: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    print("="*60)
    
    import requests
    
    def demo_wait_for_service(url: str, service_name: str, max_wait: int = 10):
        """–î–µ–º–æ –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å {service_name} –Ω–∞ {url}")
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                response = requests.get(url, timeout=2)
                if response.status_code == 200:
                    elapsed = time.time() - start_time
                    print(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤ –∑–∞ {elapsed:.1f} —Å–µ–∫")
                    return True
            except requests.exceptions.RequestException:
                pass
            
            elapsed = time.time() - start_time
            print(f"‚è≥ {service_name} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥—É... ({int(elapsed)}—Å)")
            time.sleep(1)
        
        print(f"‚ùå {service_name} –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞ {max_wait} —Å–µ–∫")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö URL (Google –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç)
    test_services = [
        ("https://httpbin.org/status/200", "HTTPBin Test Service"),
        ("https://httpbin.org/delay/3", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å (3 —Å–µ–∫)"),
    ]
    
    for url, name in test_services:
        result = demo_wait_for_service(url, name, max_wait=8)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {name}: {'‚úÖ –û–ö' if result else '‚ùå FAIL'}\n")


if __name__ == "__main__":
    print(f"üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô - {datetime.now().strftime('%H:%M:%S')}")
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    try:
        test_memory_monitor_output()
        test_report_builder()
        test_smart_health_check()
        
        print("\n" + "="*60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print("‚úÖ –ù–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞")
        print("‚úÖ –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")  
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        sys.exit(1)