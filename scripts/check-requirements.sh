#!/bin/bash

# ==========================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
# ==========================================

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo ""
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã...${NC}"
echo ""

ERRORS=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
check_command() {
    local cmd=$1
    local name=$2
    
    if command -v $cmd >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        ERRORS=$((ERRORS + 1))
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
check_file() {
    local file=$1
    local name=$2
    
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name –ù–ï –Ω–∞–π–¥–µ–Ω${NC}"
        ERRORS=$((ERRORS + 1))
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_dir() {
    local dir=$1
    local name=$2
    
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ $name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        return 1
    fi
}

echo -e "${BLUE}üì¶ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:${NC}"
check_command "python3" "Python 3"
check_command "docker" "Docker"
check_command "docker-compose" "Docker Compose"
check_command "java" "Java"
check_command "allure" "Allure"

echo ""
echo -e "${BLUE}üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
check_file "docker-compose.yml" "docker-compose.yml"
check_file "requirements.txt" "requirements.txt"
check_file "Makefile" "Makefile"
check_dir "apps/app_with_leak" "apps/app_with_leak"
check_dir "apps/app_without_leak" "apps/app_without_leak"
check_dir "tests" "tests"

echo ""
echo -e "${BLUE}üêç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ:${NC}"
if [ -d "venv" ]; then
    echo -e "${GREEN}‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ${NC}"
    
    if [ -f "venv/bin/pytest" ]; then
        echo -e "${GREEN}‚úÖ pytest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå pytest –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        ERRORS=$((ERRORS + 1))
    fi
    
    if [ -f "venv/bin/allure" ] || command -v allure >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ allure –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå allure –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${RED}‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ù–ï —Å–æ–∑–¥–∞–Ω–æ${NC}"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo -e "${BLUE}üê≥ Docker:${NC}"
if docker ps >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Docker daemon —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "${RED}‚ùå Docker daemon –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    ERRORS=$((ERRORS + 1))
fi

if groups $USER | grep -q docker; then
    echo -e "${GREEN}‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ docker${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ –≥—Ä—É–ø–ø–µ docker${NC}"
    echo -e "${YELLOW}   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo usermod -aG docker \$USER${NC}"
fi

echo ""
echo "=========================================="
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
    echo -e "${GREEN}–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: make full-demo${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: $ERRORS${NC}"
    echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make install${NC}"
    exit 1
fi
